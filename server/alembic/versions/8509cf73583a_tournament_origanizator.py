"""tournament origanizator

Revision ID: 8509cf73583a
Revises: 21368eedac99
Create Date: 2025-05-21 19:14:21.183866

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import text


# revision identifiers, used by Alembic.
revision: str = '8509cf73583a'
down_revision: Union[str, None] = '21368eedac99'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('tournaments', sa.Column('organizator_id', sa.Uuid(), nullable=True))
    
    # Get the first user's ID from the users table
    connection = op.get_bind()
    first_user_id = connection.execute(text("SELECT id FROM users ORDER BY telegram_id LIMIT 1")).scalar()
    
    if first_user_id:
        # Set the organizator_id for all existing tournaments to the first user's ID
        connection.execute(
            text(f"UPDATE tournaments SET organizator_id = '{first_user_id}'")
        )
    
    # Make the organizator_id column non-nullable after setting values
    op.alter_column('tournaments', 'organizator_id', nullable=False)
    
    # Create the foreign key constraint
    op.create_foreign_key('fk_tournaments_organizator_id_users', 'tournaments', 'users', ['organizator_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First check if the column exists before trying to drop it
    connection = op.get_bind()
    
    # Check if column exists in the schema
    column_exists = connection.execute(
        text("""
        SELECT 1 
        FROM information_schema.columns 
        WHERE table_name = 'tournaments' 
        AND column_name = 'organizator_id'
        """)
    ).scalar() is not None
    
    if column_exists:
        # Try to drop any foreign key constraints on the column
        constraints = connection.execute(
            text("""
            SELECT tc.constraint_name 
            FROM information_schema.table_constraints AS tc 
            JOIN information_schema.constraint_column_usage AS ccu
            ON tc.constraint_name = ccu.constraint_name
            WHERE tc.constraint_type = 'FOREIGN KEY' 
            AND tc.table_name = 'tournaments' 
            AND ccu.column_name = 'organizator_id'
            """)
        ).fetchall()
        
        # Drop each constraint found
        for constraint in constraints:
            constraint_name = constraint[0]
            connection.execute(text(f'ALTER TABLE tournaments DROP CONSTRAINT IF EXISTS "{constraint_name}"'))
        
        # Now drop the column
        connection.execute(text('ALTER TABLE tournaments DROP COLUMN IF EXISTS organizator_id'))
    
    # ### end Alembic commands ###
