from typing import List
from uuid import UUID

from aiogram import Bot
from db.models.tournament import Tournament
from db.models.waitlist import Waitlist
from repositories import waitlist_repository
from sqlalchemy.orm import Session, joinedload


async def notify_waitlist_users(bot: Bot, db: Session, tournament_id: UUID):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –æ—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ
    –ù–µ —Å–æ–∑–¥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª—è–µ—Ç
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
        tournament = db.query(Tournament).filter(Tournament.id == tournament_id).first()
        if not tournament:
            print(f"Tournament with id {tournament_id} not found")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ waitlist
        waitlist_users = (
            db.query(Waitlist)
            .options(joinedload(Waitlist.user))
            .filter(Waitlist.tournament_id == tournament_id)
            .order_by(Waitlist.date)
            .all()
        )

        if not waitlist_users:
            print(f"No users in waitlist for tournament {tournament.name}")
            return

        print(
            f"Notifying {len(waitlist_users)} users about free spot in tournament {tournament.name}"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ waitlist
        for waitlist_entry in waitlist_users:
            try:
                message = (
                    f"üéæ –û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ –≤ —Ç—É—Ä–Ω–∏—Ä–µ '{tournament.name}'!\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä.\n"
                    f"–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'."
                )

                await bot.send_message(waitlist_entry.user.telegram_id, message)
                print(
                    f"Notification sent to user {waitlist_entry.user.first_name} {waitlist_entry.user.second_name}"
                )

            except Exception as e:
                print(
                    f"Failed to send notification to user {waitlist_entry.user.id}: {e}"
                )
                continue

    except Exception as e:
        print(f"Error in notify_waitlist_users: {e}")


async def notify_tournament_cancelled(bot: Bot, db: Session, tournament_id: UUID):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ waitlist –æ–± –æ—Ç–º–µ–Ω–µ —Ç—É—Ä–Ω–∏—Ä–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
        tournament = db.query(Tournament).filter(Tournament.id == tournament_id).first()
        if not tournament:
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ waitlist
        waitlist_users = (
            db.query(Waitlist)
            .options(joinedload(Waitlist.user))
            .filter(Waitlist.tournament_id == tournament_id)
            .all()
        )

        if not waitlist_users:
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ waitlist –æ–± –æ—Ç–º–µ–Ω–µ
        for waitlist_entry in waitlist_users:
            try:
                message = (
                    f"‚ùå –¢—É—Ä–Ω–∏—Ä '{tournament.name}' –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
                    f"–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è."
                )

                await bot.send_message(waitlist_entry.user.telegram_id, message)

            except Exception as e:
                print(
                    f"Failed to send cancellation notification to user {waitlist_entry.user.id}: {e}"
                )
                continue

    except Exception as e:
        print(f"Error in notify_tournament_cancelled: {e}")
