definitions:
  domain.Loyalty:
    properties:
      data:
        type: string
      description:
        type: string
      discount:
        type: integer
      id:
        type: integer
      name:
        type: string
    type: object
  domain.PatchUser:
    properties:
      avatar:
        type: string
      bio:
        type: string
      birth_date:
        type: string
      city:
        type: string
      firstName:
        type: string
      is_registered:
        type: boolean
      lastName:
        type: string
      padel_profiles:
        type: string
      playing_position:
        $ref: '#/definitions/domain.PlayingPosition'
      rank:
        type: number
      telegramUsername:
        type: string
    type: object
  domain.PlayingPosition:
    enum:
    - right
    - left
    - both
    type: string
    x-enum-varnames:
    - PlayingPositionRight
    - PlayingPositionLeft
    - PlayingPositionBoth
  domain.User:
    properties:
      avatar:
        type: string
      bio:
        type: string
      birth_date:
        type: string
      city:
        type: string
      firstName:
        type: string
      id:
        type: string
      is_registered:
        type: boolean
      lastName:
        type: string
      loyalty:
        $ref: '#/definitions/domain.Loyalty'
      padel_profiles:
        type: string
      playing_position:
        $ref: '#/definitions/domain.PlayingPosition'
      rank:
        type: number
      telegramId:
        type: integer
      telegramUsername:
        type: string
    type: object
  image.UploadResponse:
    properties:
      url:
        example: https://example.com/image.jpg
        type: string
    type: object
info:
  contact: {}
  description: Manage chats, users
  title: GoPadel server
  version: "1.0"
paths:
  /images/upload/avatar:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: Image data
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: A url to the stored image
          schema:
            $ref: '#/definitions/image.UploadResponse'
        "400":
          description: Parsing error
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Upload file to s3
      tags:
      - images
  /users/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get me
      tags:
      - users
    patch:
      consumes:
      - application/json
      parameters:
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.PatchUser'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user data
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Update current user data
      tags:
      - users
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Create me
      tags:
      - users
  /users/me/bio:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: User bio data
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
        "404":
          description: User bio not found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get current user bio
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-API-Token
    type: apiKey
swagger: "2.0"
