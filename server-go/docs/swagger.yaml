definitions:
  domain.AdminFilterRegistration:
    properties:
      id:
        type: string
      status:
        $ref: '#/definitions/domain.RegistrationStatus'
      tournamentId:
        type: string
      tournamentName:
        type: string
      userFirstName:
        type: string
      userId:
        type: string
      userTelegramId:
        description: Дополнительные поля для удобства фильтрации
        type: integer
      userTelegramUsername:
        type: string
    type: object
  domain.AdminLogin:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  domain.AdminMe:
    properties:
      first_name:
        type: string
      is_active:
        type: boolean
      is_superuser:
        type: boolean
      last_name:
        type: string
      username:
        type: string
    type: object
  domain.AdminPasswordChange:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  domain.AdminPatchUser:
    properties:
      avatar:
        type: string
      bio:
        type: string
      birthDate:
        type: string
      city:
        type: string
      firstName:
        type: string
      isRegistered:
        type: boolean
      lastName:
        type: string
      loyaltyId:
        type: integer
      padelProfiles:
        type: string
      playingPosition:
        $ref: '#/definitions/domain.PlayingPosition'
      rank:
        type: number
    type: object
  domain.AdminToken:
    properties:
      access_token:
        type: string
      token_type:
        type: string
    type: object
  domain.AdminUser:
    properties:
      first_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_superuser:
        type: boolean
      last_name:
        type: string
      user:
        $ref: '#/definitions/domain.User'
      user_id:
        type: string
      username:
        type: string
    type: object
  domain.Club:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  domain.Court:
    properties:
      address:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  domain.CreateAdminUser:
    properties:
      first_name:
        type: string
      is_active:
        type: boolean
      is_superuser:
        type: boolean
      last_name:
        type: string
      password:
        type: string
      user_id:
        type: string
      username:
        type: string
    required:
    - first_name
    - last_name
    - password
    - user_id
    - username
    type: object
  domain.CreateClub:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    required:
    - id
    - name
    type: object
  domain.CreateCourt:
    properties:
      address:
        type: string
      name:
        type: string
    required:
    - address
    - name
    type: object
  domain.CreateLoyalty:
    properties:
      description:
        type: string
      discount:
        type: integer
      name:
        type: string
      requirements:
        type: string
    type: object
  domain.CreateTournament:
    properties:
      clubId:
        type: string
      courtId:
        type: string
      description:
        type: string
      endTime:
        type: string
      maxUsers:
        type: integer
      name:
        type: string
      organizatorId:
        type: string
      price:
        type: integer
      rankMax:
        type: number
      rankMin:
        type: number
      startTime:
        type: string
      tournamentType:
        type: string
    required:
    - clubId
    - courtId
    - maxUsers
    - name
    - organizatorId
    - rankMax
    - rankMin
    - startTime
    - tournamentType
    type: object
  domain.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  domain.FilterAdminUser:
    properties:
      first_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_superuser:
        type: boolean
      last_name:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  domain.FilterClub:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  domain.FilterTournament:
    properties:
      filterByUserClubs:
        description: user ID to filter by user's clubs
        type: string
      id:
        type: string
      name:
        type: string
      notEnded:
        description: default true
        type: boolean
      notFull:
        description: true if tournament is not full
        type: boolean
      organizatorId:
        type: string
    type: object
  domain.FilterUser:
    properties:
      filterByUserClubs:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      telegramId:
        type: integer
      telegramUsername:
        type: string
    type: object
  domain.Loyalty:
    properties:
      description:
        type: string
      discount:
        type: integer
      id:
        type: integer
      name:
        type: string
      requirements:
        type: string
    type: object
  domain.MessageResponse:
    properties:
      message:
        type: string
    type: object
  domain.PatchAdminUser:
    properties:
      first_name:
        type: string
      is_active:
        type: boolean
      is_superuser:
        type: boolean
      last_name:
        type: string
      password:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  domain.PatchClub:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  domain.PatchCourt:
    properties:
      address:
        type: string
      name:
        type: string
    type: object
  domain.PatchLoyalty:
    properties:
      description:
        type: string
      discount:
        type: integer
      name:
        type: string
      requirements:
        type: string
    type: object
  domain.PatchTournament:
    properties:
      clubId:
        type: string
      courtId:
        type: string
      description:
        type: string
      endTime:
        type: string
      maxUsers:
        type: integer
      name:
        type: string
      price:
        type: integer
      rankMax:
        type: number
      rankMin:
        type: number
      startTime:
        type: string
      tournamentType:
        type: string
    type: object
  domain.PatchUser:
    properties:
      avatar:
        type: string
      bio:
        type: string
      birthDate:
        type: string
      city:
        type: string
      firstName:
        type: string
      isRegistered:
        type: boolean
      lastName:
        type: string
      loyaltyId:
        type: integer
      padelProfiles:
        type: string
      playingPosition:
        $ref: '#/definitions/domain.PlayingPosition'
      rank:
        type: number
      telegramUsername:
        type: string
    type: object
  domain.Payment:
    properties:
      amount:
        type: integer
      confirmationToken:
        type: string
      date:
        type: string
      id:
        type: string
      paymentId:
        type: string
      paymentLink:
        type: string
      registration:
        $ref: '#/definitions/domain.Registration'
      registrationId:
        type: string
      status:
        $ref: '#/definitions/domain.PaymentStatus'
    type: object
  domain.PaymentStatus:
    enum:
    - pending
    - waiting_for_capture
    - succeeded
    - canceled
    type: string
    x-enum-varnames:
    - PaymentStatusPending
    - PaymentStatusWaitingForCapture
    - PaymentStatusSucceeded
    - PaymentStatusCanceled
  domain.PlayingPosition:
    enum:
    - right
    - left
    - both
    type: string
    x-enum-varnames:
    - PlayingPositionRight
    - PlayingPositionLeft
    - PlayingPositionBoth
  domain.Registration:
    properties:
      date:
        type: string
      id:
        type: string
      status:
        $ref: '#/definitions/domain.RegistrationStatus'
      tournamentId:
        type: string
      user:
        $ref: '#/definitions/domain.User'
      userId:
        type: string
    type: object
  domain.RegistrationStatus:
    enum:
    - PENDING
    - ACTIVE
    - CANCELED
    - CANCELED_BY_USER
    type: string
    x-enum-varnames:
    - RegistrationStatusPending
    - RegistrationStatusActive
    - RegistrationStatusCanceled
    - RegistrationStatusCanceledByUser
  domain.RegistrationWithPayments:
    properties:
      date:
        type: string
      id:
        type: string
      payments:
        items:
          $ref: '#/definitions/domain.Payment'
        type: array
      status:
        $ref: '#/definitions/domain.RegistrationStatus'
      tournament:
        $ref: '#/definitions/domain.TournamentForRegistration'
      tournamentId:
        type: string
      user:
        $ref: '#/definitions/domain.User'
      userId:
        type: string
    type: object
  domain.RegistrationWithTournament:
    properties:
      date:
        type: string
      id:
        type: string
      status:
        $ref: '#/definitions/domain.RegistrationStatus'
      tournament:
        $ref: '#/definitions/domain.TournamentForRegistration'
      tournamentId:
        type: string
      user:
        $ref: '#/definitions/domain.User'
      userId:
        type: string
    type: object
  domain.Tournament:
    properties:
      clubId:
        type: string
      court:
        $ref: '#/definitions/domain.Court'
      description:
        type: string
      endTime:
        type: string
      id:
        type: string
      maxUsers:
        type: integer
      name:
        type: string
      organizator:
        $ref: '#/definitions/domain.User'
      participants:
        items:
          $ref: '#/definitions/domain.Registration'
        type: array
      price:
        type: integer
      rankMax:
        type: number
      rankMin:
        type: number
      startTime:
        type: string
      tournamentType:
        type: string
    type: object
  domain.TournamentForRegistration:
    properties:
      court:
        $ref: '#/definitions/domain.Court'
      description:
        type: string
      endTime:
        type: string
      id:
        type: string
      maxUsers:
        type: integer
      name:
        type: string
      organizator:
        $ref: '#/definitions/domain.User'
      price:
        type: integer
      rankMax:
        type: number
      rankMin:
        type: number
      startTime:
        type: string
      tournamentType:
        type: string
    type: object
  domain.User:
    properties:
      avatar:
        type: string
      bio:
        type: string
      birthDate:
        type: string
      city:
        type: string
      firstName:
        type: string
      id:
        type: string
      isRegistered:
        type: boolean
      lastName:
        type: string
      loyalty:
        $ref: '#/definitions/domain.Loyalty'
      padelProfiles:
        type: string
      playingPosition:
        $ref: '#/definitions/domain.PlayingPosition'
      rank:
        type: number
      telegramId:
        type: integer
      telegramUsername:
        type: string
    type: object
  domain.WaitlistUser:
    properties:
      date:
        type: string
      user:
        $ref: '#/definitions/domain.User'
    type: object
  image.UploadResponse:
    properties:
      url:
        example: https://example.com/image.jpg
        type: string
    type: object
  registration.CreatePaymentRequest:
    properties:
      returnUrl:
        type: string
    required:
    - returnUrl
    type: object
  webhook.WebhookEvent:
    properties:
      event:
        type: string
      object:
        $ref: '#/definitions/webhook.WebhookEventObject'
      type:
        type: string
    type: object
  webhook.WebhookEventObject:
    properties:
      id:
        type: string
      status:
        type: string
    type: object
info:
  contact: {}
  description: Manage chats, users, tournaments. For JWT authentication use 'Bearer
    <token>' format in Authorization header.
  title: GoPadel server
  version: "1.0"
paths:
  /admin:
    post:
      consumes:
      - application/json
      description: Create a new admin user. Available only for superuser.
      parameters:
      - description: Admin data
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/domain.CreateAdminUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.AdminUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create admin user
      tags:
      - admin
  /admin/{id}:
    delete:
      consumes:
      - application/json
      description: Delete admin user. Available only for superuser.
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete admin user
      tags:
      - admin
    patch:
      consumes:
      - application/json
      description: Update admin user data. Available only for superuser.
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: string
      - description: Admin update data
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/domain.PatchAdminUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.AdminUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update admin user
      tags:
      - admin
  /admin/auth/change-password:
    post:
      consumes:
      - application/json
      description: Change password for currently authenticated admin
      parameters:
      - description: Password change data
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/domain.AdminPasswordChange'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change admin password
      tags:
      - admin-auth
  /admin/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate admin user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/domain.AdminLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.AdminToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Admin login
      tags:
      - admin-auth
  /admin/auth/me:
    get:
      description: Get information about currently authenticated admin
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.AdminMe'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current admin info
      tags:
      - admin-auth
  /admin/clubs:
    get:
      description: Get all clubs. Available for any admin.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Club'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all clubs (Admin)
      tags:
      - admin-clubs
    post:
      consumes:
      - application/json
      description: Create a new club. Available for superusers only.
      parameters:
      - description: Club data
        in: body
        name: club
        required: true
        schema:
          $ref: '#/definitions/domain.CreateClub'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Club'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create club (Admin)
      tags:
      - admin-clubs
  /admin/clubs/{id}:
    delete:
      description: Delete club. Available for superusers only.
      parameters:
      - description: Club ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete club (Admin)
      tags:
      - admin-clubs
    patch:
      consumes:
      - application/json
      description: Update club data. Available for superusers only.
      parameters:
      - description: Club ID
        in: path
        name: id
        required: true
        type: string
      - description: Club update data
        in: body
        name: club
        required: true
        schema:
          $ref: '#/definitions/domain.PatchClub'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Club'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update club (Admin)
      tags:
      - admin-clubs
  /admin/courts:
    get:
      description: Get all courts. Available for any admin.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Court'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all courts (Admin)
      tags:
      - admin-courts
    post:
      consumes:
      - application/json
      description: Create a new court. Available only for superuser.
      parameters:
      - description: Court data
        in: body
        name: court
        required: true
        schema:
          $ref: '#/definitions/domain.CreateCourt'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Court'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create court (Admin)
      tags:
      - admin-courts
  /admin/courts/{id}:
    delete:
      description: Delete court. Available only for superuser.
      parameters:
      - description: Court ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete court (Admin)
      tags:
      - admin-courts
    get:
      description: Get court by ID. Available for any admin.
      parameters:
      - description: Court ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Court'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get court (Admin)
      tags:
      - admin-courts
    patch:
      consumes:
      - application/json
      description: Update court data. Available only for superuser.
      parameters:
      - description: Court ID
        in: path
        name: id
        required: true
        type: string
      - description: Court update data
        in: body
        name: court
        required: true
        schema:
          $ref: '#/definitions/domain.PatchCourt'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Court'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update court (Admin)
      tags:
      - admin-courts
  /admin/filter:
    post:
      consumes:
      - application/json
      description: Get filtered list of admin users. Available only for superuser.
      parameters:
      - description: Admin filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/domain.FilterAdminUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.AdminUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Filter admin users
      tags:
      - admin
  /admin/loyalties:
    get:
      description: Get all loyalty levels. Available for any admin.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Loyalty'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all loyalty levels (Admin)
      tags:
      - admin-loyalties
    post:
      consumes:
      - application/json
      description: Create a new loyalty level. Available for any admin.
      parameters:
      - description: Loyalty data
        in: body
        name: loyalty
        required: true
        schema:
          $ref: '#/definitions/domain.CreateLoyalty'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Loyalty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create loyalty level (Admin)
      tags:
      - admin-loyalties
  /admin/loyalties/{id}:
    delete:
      description: Delete loyalty level. Available for any admin.
      parameters:
      - description: Loyalty ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete loyalty level (Admin)
      tags:
      - admin-loyalties
    patch:
      consumes:
      - application/json
      description: Update loyalty level data. Available for any admin.
      parameters:
      - description: Loyalty ID
        in: path
        name: id
        required: true
        type: integer
      - description: Loyalty update data
        in: body
        name: loyalty
        required: true
        schema:
          $ref: '#/definitions/domain.PatchLoyalty'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Loyalty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update loyalty level (Admin)
      tags:
      - admin-loyalties
  /admin/registrations/{id}:
    get:
      description: Get registration with payments and tournament info. Available for
        any admin.
      parameters:
      - description: Registration ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.RegistrationWithPayments'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get registration (Admin)
      tags:
      - admin-registrations
  /admin/registrations/{id}/status:
    patch:
      consumes:
      - application/json
      description: Update registration status. Available only for superuser.
      parameters:
      - description: Registration ID
        in: path
        name: id
        required: true
        type: string
      - description: Status update data
        in: body
        name: body
        required: true
        schema:
          properties:
            status:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.RegistrationWithPayments'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update registration status (Admin)
      tags:
      - admin-registrations
  /admin/registrations/filter:
    post:
      consumes:
      - application/json
      description: Get filtered list of registrations with payments and tournament
        info. Available for any admin.
      parameters:
      - description: Registration filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/domain.AdminFilterRegistration'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.RegistrationWithPayments'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Filter registrations (Admin)
      tags:
      - admin-registrations
  /admin/registrations/tournaments:
    get:
      description: Get list of tournaments for filtering. Available for any admin.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              properties:
                id:
                  type: string
                name:
                  type: string
              type: object
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get tournament options (Admin)
      tags:
      - admin-registrations
  /admin/registrations/users:
    post:
      consumes:
      - application/json
      description: Get list of users for filtering by telegram username only. Available
        for any admin.
      parameters:
      - description: User filter (telegram username only)
        in: body
        name: filter
        required: true
        schema:
          properties:
            telegramUsername:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              properties:
                firstName:
                  type: string
                id:
                  type: string
                lastName:
                  type: string
                telegramUsername:
                  type: string
              type: object
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user options (Admin)
      tags:
      - admin-registrations
  /admin/users/{id}:
    patch:
      consumes:
      - application/json
      description: Update user data. Available only for superuser. Cannot change telegramUsername.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.AdminPatchUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user (Admin)
      tags:
      - admin-users
  /admin/users/filter:
    post:
      consumes:
      - application/json
      description: Get filtered list of users. Available for any admin.
      parameters:
      - description: User filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/domain.FilterUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Filter users (Admin)
      tags:
      - admin-users
  /api/v1/yookassa_webhook:
    post:
      consumes:
      - application/json
      description: Handles payment status updates from YooKassa
      parameters:
      - description: Webhook event
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/webhook.WebhookEvent'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: YooKassa webhook for payment notifications
      tags:
      - webhook
  /clubs/{club_id}/join:
    post:
      consumes:
      - application/json
      parameters:
      - description: Club ID
        in: path
        name: club_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Club data
          schema:
            $ref: '#/definitions/domain.Club'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Join club
      tags:
      - clubs
  /clubs/filter:
    post:
      consumes:
      - application/json
      parameters:
      - description: Filter parameters
        in: body
        name: filter
        schema:
          $ref: '#/definitions/domain.FilterClub'
      produces:
      - application/json
      responses:
        "200":
          description: List of clubs
          schema:
            items:
              $ref: '#/definitions/domain.Club'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Filter clubs
      tags:
      - clubs
  /clubs/my:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: List of user's clubs
          schema:
            items:
              $ref: '#/definitions/domain.Club'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get my clubs
      tags:
      - clubs
  /courts:
    get:
      consumes:
      - application/json
      description: Returns a list of all courts. Only available for authenticated
        Telegram admins.
      produces:
      - application/json
      responses:
        "200":
          description: List of courts
          schema:
            items:
              $ref: '#/definitions/domain.Court'
            type: array
        "401":
          description: User not authorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Admin rights required
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get all courts
      tags:
      - courts
  /images/upload/avatar:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: Image data
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: A url to the stored image
          schema:
            $ref: '#/definitions/image.UploadResponse'
        "400":
          description: Parsing error
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Upload file to s3
      tags:
      - images
  /loyalties:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: List of loyalty programs
          schema:
            items:
              $ref: '#/definitions/domain.Loyalty'
            type: array
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get all loyalty programs
      tags:
      - loyalties
  /registrations/{tournament_id}:
    post:
      consumes:
      - application/json
      description: Creates new registration or updates existing CANCELED status to
        PENDING. For free tournaments, status is set to ACTIVE immediately.
      parameters:
      - description: Tournament ID
        in: path
        name: tournament_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Registration created or updated
          schema:
            $ref: '#/definitions/domain.Registration'
        "400":
          description: Invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Tournament not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict (already registered or tournament full)
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Register for tournament
      tags:
      - registration
  /registrations/{tournament_id}/cancel:
    post:
      consumes:
      - application/json
      description: Cancels registration with PENDING status (before payment)
      parameters:
      - description: Tournament ID
        in: path
        name: tournament_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Registration canceled
          schema:
            $ref: '#/definitions/domain.Registration'
        "400":
          description: Invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Registration not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Cancel registration before payment
      tags:
      - registration
  /registrations/{tournament_id}/cancel-paid:
    post:
      consumes:
      - application/json
      description: Cancels registration with ACTIVE status (after payment)
      parameters:
      - description: Tournament ID
        in: path
        name: tournament_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Registration canceled
          schema:
            $ref: '#/definitions/domain.Registration'
        "400":
          description: Invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Registration not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Cancel registration after payment
      tags:
      - registration
  /registrations/{tournament_id}/payment:
    post:
      consumes:
      - application/json
      description: Creates payment in YooKassa for existing PENDING registration.
        Returns existing payment if it's already in success/pending status. For free
        tournaments (price = 0), payment is not required.
      parameters:
      - description: Tournament ID
        in: path
        name: tournament_id
        required: true
        type: string
      - description: Payment creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/registration.CreatePaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Payment created or existing payment returned
          schema:
            $ref: '#/definitions/domain.Payment'
        "400":
          description: Invalid request data or tournament is free
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: No pending registration found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Create payment for tournament registration
      tags:
      - registration
  /registrations/{tournament_id}/reactivate:
    post:
      consumes:
      - application/json
      description: Reactivates registration from CANCELED_BY_USER status to ACTIVE
      parameters:
      - description: Tournament ID
        in: path
        name: tournament_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Registration reactivated
          schema:
            $ref: '#/definitions/domain.Registration'
        "400":
          description: Invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Registration not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Tournament is full
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Reactivate canceled registration
      tags:
      - registration
  /registrations/my:
    get:
      consumes:
      - application/json
      description: Returns all registrations for the current user with tournament
        information
      produces:
      - application/json
      responses:
        "200":
          description: List of registrations with tournament details
          schema:
            items:
              $ref: '#/definitions/domain.RegistrationWithTournament'
            type: array
        "401":
          description: User not authorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get my registrations
      tags:
      - registration
  /tournaments:
    post:
      consumes:
      - application/json
      description: Creates a new tournament. Requires telegram admin rights.
      parameters:
      - description: Tournament data
        in: body
        name: tournament
        required: true
        schema:
          $ref: '#/definitions/domain.CreateTournament'
      produces:
      - application/json
      responses:
        "201":
          description: Created tournament
          schema:
            $ref: '#/definitions/domain.Tournament'
        "400":
          description: Invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Telegram admin rights required
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Create tournament
      tags:
      - tournaments
  /tournaments/{tournament_id}:
    delete:
      consumes:
      - application/json
      description: Deletes a tournament. Only the tournament organizer can delete
        their tournament.
      parameters:
      - description: Tournament ID
        in: path
        name: tournament_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Tournament deleted successfully
        "400":
          description: Invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Not tournament organizer or admin rights required
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Tournament not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Delete tournament
      tags:
      - tournaments
    patch:
      consumes:
      - application/json
      description: Updates tournament data. Only the tournament organizer can update
        their tournament.
      parameters:
      - description: Tournament ID
        in: path
        name: tournament_id
        required: true
        type: string
      - description: Tournament update data
        in: body
        name: tournament
        required: true
        schema:
          $ref: '#/definitions/domain.PatchTournament'
      produces:
      - application/json
      responses:
        "200":
          description: Updated tournament
          schema:
            $ref: '#/definitions/domain.Tournament'
        "400":
          description: Invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Not tournament organizer or admin rights required
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Tournament not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Update tournament
      tags:
      - tournaments
  /tournaments/{tournament_id}/waitlist:
    delete:
      consumes:
      - application/json
      description: Remove authenticated user from tournament waitlist
      parameters:
      - description: Tournament ID
        in: path
        name: tournament_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tournament waitlist users after removal
          schema:
            items:
              $ref: '#/definitions/domain.WaitlistUser'
            type: array
        "400":
          description: Invalid tournament ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Tournament not found or user not in waitlist
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Remove user from tournament waitlist
      tags:
      - tournaments
    get:
      consumes:
      - application/json
      description: Get list of users in tournament waitlist
      parameters:
      - description: Tournament ID
        in: path
        name: tournament_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tournament waitlist users
          schema:
            items:
              $ref: '#/definitions/domain.WaitlistUser'
            type: array
        "400":
          description: Invalid tournament ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Tournament not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get tournament waitlist
      tags:
      - tournaments
    post:
      consumes:
      - application/json
      description: Add authenticated user to tournament waitlist. Checks that tournament
        has not ended.
      parameters:
      - description: Tournament ID
        in: path
        name: tournament_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tournament waitlist users after adding
          schema:
            items:
              $ref: '#/definitions/domain.WaitlistUser'
            type: array
        "400":
          description: Invalid tournament ID or tournament has ended
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Tournament not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: User already in waitlist
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Add user to tournament waitlist
      tags:
      - tournaments
  /tournaments/filter:
    post:
      consumes:
      - application/json
      parameters:
      - description: Tournament filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/domain.FilterTournament'
      produces:
      - application/json
      responses:
        "200":
          description: List of tournaments
          schema:
            items:
              $ref: '#/definitions/domain.Tournament'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Filter tournaments
      tags:
      - tournaments
  /users/{user_id}/tournaments:
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of tournaments where user participated
          schema:
            items:
              $ref: '#/definitions/domain.Tournament'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get tournaments by user ID
      tags:
      - users
  /users/filter:
    post:
      consumes:
      - application/json
      parameters:
      - description: User filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/domain.FilterUser'
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Filter users
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get me
      tags:
      - users
    patch:
      consumes:
      - application/json
      parameters:
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.PatchUser'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user data
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Update current user data
      tags:
      - users
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Create me
      tags:
      - users
  /users/me/admin:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Admin status
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Check if user is admin
      tags:
      - users
  /users/me/bio:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: User bio data
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
        "404":
          description: User bio not found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get current user bio
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-API-Token
    type: apiKey
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
