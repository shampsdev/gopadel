definitions:
  domain.AdminLogin:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  domain.AdminMe:
    properties:
      first_name:
        type: string
      is_active:
        type: boolean
      is_superuser:
        type: boolean
      last_name:
        type: string
      username:
        type: string
    type: object
  domain.AdminPasswordChange:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  domain.AdminPatchUser:
    properties:
      avatar:
        type: string
      bio:
        type: string
      birthDate:
        type: string
      city:
        type: string
      firstName:
        type: string
      isRegistered:
        type: boolean
      lastName:
        type: string
      loyaltyId:
        type: integer
      padelProfiles:
        type: string
      playingPosition:
        $ref: '#/definitions/domain.PlayingPosition'
      rank:
        type: number
    type: object
  domain.AdminToken:
    properties:
      access_token:
        type: string
      token_type:
        type: string
    type: object
  domain.AdminUser:
    properties:
      first_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_superuser:
        type: boolean
      last_name:
        type: string
      user:
        $ref: '#/definitions/domain.User'
      user_id:
        type: string
      username:
        type: string
    type: object
  domain.Club:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  domain.Court:
    properties:
      address:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  domain.CreateAdminUser:
    properties:
      first_name:
        type: string
      is_active:
        type: boolean
      is_superuser:
        type: boolean
      last_name:
        type: string
      password:
        type: string
      user_id:
        type: string
      username:
        type: string
    required:
    - first_name
    - last_name
    - password
    - user_id
    - username
    type: object
  domain.CreateClub:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    required:
    - id
    - name
    type: object
  domain.CreateCourt:
    properties:
      address:
        type: string
      name:
        type: string
    required:
    - address
    - name
    type: object
  domain.CreateEvent:
    properties:
      clubId:
        type: string
      courtId:
        type: string
      data:
        type: object
      description:
        type: string
      endTime:
        type: string
      maxUsers:
        minimum: 2
        type: integer
      name:
        type: string
      organizerId:
        type: string
      price:
        minimum: 0
        type: integer
      rankMax:
        minimum: 0
        type: number
      rankMin:
        minimum: 0
        type: number
      startTime:
        type: string
      type:
        $ref: '#/definitions/domain.EventType'
    required:
    - courtId
    - endTime
    - maxUsers
    - name
    - startTime
    - type
    type: object
  domain.CreateLoyalty:
    properties:
      description:
        type: string
      discount:
        type: integer
      name:
        type: string
      requirements:
        type: string
    type: object
  domain.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  domain.Event:
    properties:
      clubId:
        type: string
      court:
        $ref: '#/definitions/domain.Court'
      createdAt:
        type: string
      data:
        type: object
      description:
        type: string
      endTime:
        type: string
      id:
        type: string
      maxUsers:
        type: integer
      name:
        type: string
      organizer:
        $ref: '#/definitions/domain.User'
      participants:
        items:
          $ref: '#/definitions/domain.Registration'
        type: array
      price:
        type: integer
      rankMax:
        type: number
      rankMin:
        type: number
      startTime:
        type: string
      status:
        $ref: '#/definitions/domain.EventStatus'
      type:
        $ref: '#/definitions/domain.EventType'
      updatedAt:
        type: string
    type: object
  domain.EventForRegistration:
    properties:
      clubId:
        type: string
      court:
        $ref: '#/definitions/domain.Court'
      data:
        type: object
      description:
        type: string
      endTime:
        type: string
      id:
        type: string
      maxUsers:
        type: integer
      name:
        type: string
      organizer:
        $ref: '#/definitions/domain.User'
      price:
        type: integer
      rankMax:
        type: number
      rankMin:
        type: number
      startTime:
        type: string
      status:
        $ref: '#/definitions/domain.EventStatus'
      type:
        $ref: '#/definitions/domain.EventType'
    type: object
  domain.EventStatus:
    enum:
    - registration
    - full
    - completed
    - cancelled
    type: string
    x-enum-comments:
      EventStatusCancelled: Событие отменено
      EventStatusCompleted: Событие завершено
      EventStatusFull: Набор закрыт (все места заняты)
      EventStatusRegistration: Регистрация открыта
    x-enum-varnames:
    - EventStatusRegistration
    - EventStatusFull
    - EventStatusCompleted
    - EventStatusCancelled
  domain.EventType:
    enum:
    - game
    - tournament
    - training
    type: string
    x-enum-comments:
      EventTypeGame: Обычная игра
      EventTypeTournament: Турнир
      EventTypeTraining: Тренировка
    x-enum-varnames:
    - EventTypeGame
    - EventTypeTournament
    - EventTypeTraining
  domain.FilterAdminUser:
    properties:
      first_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_superuser:
        type: boolean
      last_name:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  domain.FilterClub:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  domain.FilterEvent:
    properties:
      clubId:
        type: string
      filterByUserClubs:
        description: user ID для фильтрации по клубам пользователя
        type: string
      id:
        type: string
      name:
        type: string
      notCompleted:
        description: true если событие не завершено
        type: boolean
      notFull:
        description: true если событие не заполнено
        type: boolean
      organizerId:
        type: string
      status:
        $ref: '#/definitions/domain.EventStatus'
      type:
        $ref: '#/definitions/domain.EventType'
    type: object
  domain.FilterUser:
    properties:
      filterByUserClubs:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      telegramId:
        type: integer
      telegramUsername:
        type: string
    type: object
  domain.Loyalty:
    properties:
      description:
        type: string
      discount:
        type: integer
      id:
        type: integer
      name:
        type: string
      requirements:
        type: string
    type: object
  domain.MessageResponse:
    properties:
      message:
        type: string
    type: object
  domain.PatchAdminUser:
    properties:
      first_name:
        type: string
      is_active:
        type: boolean
      is_superuser:
        type: boolean
      last_name:
        type: string
      password:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  domain.PatchClub:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  domain.PatchCourt:
    properties:
      address:
        type: string
      name:
        type: string
    type: object
  domain.PatchEvent:
    properties:
      clubId:
        type: string
      courtId:
        type: string
      data:
        type: object
      description:
        type: string
      endTime:
        type: string
      maxUsers:
        type: integer
      name:
        type: string
      price:
        type: integer
      rankMax:
        type: number
      rankMin:
        type: number
      startTime:
        type: string
      status:
        $ref: '#/definitions/domain.EventStatus'
      type:
        $ref: '#/definitions/domain.EventType'
    type: object
  domain.PatchLoyalty:
    properties:
      description:
        type: string
      discount:
        type: integer
      name:
        type: string
      requirements:
        type: string
    type: object
  domain.PatchUser:
    properties:
      avatar:
        type: string
      bio:
        type: string
      birthDate:
        type: string
      city:
        type: string
      firstName:
        type: string
      isRegistered:
        type: boolean
      lastName:
        type: string
      loyaltyId:
        type: integer
      padelProfiles:
        type: string
      playingPosition:
        $ref: '#/definitions/domain.PlayingPosition'
      rank:
        type: number
      telegramUsername:
        type: string
    type: object
  domain.PlayingPosition:
    enum:
    - right
    - left
    - both
    type: string
    x-enum-varnames:
    - PlayingPositionRight
    - PlayingPositionLeft
    - PlayingPositionBoth
  domain.Registration:
    properties:
      createdAt:
        type: string
      event:
        $ref: '#/definitions/domain.EventForRegistration'
      eventId:
        type: string
      status:
        $ref: '#/definitions/domain.RegistrationStatus'
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/domain.User'
      userId:
        type: string
    type: object
  domain.RegistrationStatus:
    enum:
    - PENDING
    - CONFIRMED
    - CANCELLED_BEFORE_PAYMENT
    - CANCELLED_AFTER_PAYMENT
    - REFUNDED
    - CANCELLED
    - LEFT
    type: string
    x-enum-comments:
      RegistrationStatusCancelled: заявка отклонена (оргом) или отменена (участником)
        до подтверждения
      RegistrationStatusCancelledAfterPayment: не используется в играх (можно удалить,
        если не нужен)
      RegistrationStatusCancelledBeforePayment: не используется в играх (можно удалить,
        если не нужен)
      RegistrationStatusConfirmed: участник принят в игру
      RegistrationStatusLeft: участник вышел после подтверждения
      RegistrationStatusPending: заявка отправлена, ожидает подтверждения
      RegistrationStatusRefunded: не используется в играх (можно удалить)
    x-enum-varnames:
    - RegistrationStatusPending
    - RegistrationStatusConfirmed
    - RegistrationStatusCancelledBeforePayment
    - RegistrationStatusCancelledAfterPayment
    - RegistrationStatusRefunded
    - RegistrationStatusCancelled
    - RegistrationStatusLeft
  domain.User:
    properties:
      avatar:
        type: string
      bio:
        type: string
      birthDate:
        type: string
      city:
        type: string
      firstName:
        type: string
      id:
        type: string
      isRegistered:
        type: boolean
      lastName:
        type: string
      loyalty:
        $ref: '#/definitions/domain.Loyalty'
      padelProfiles:
        type: string
      playingPosition:
        $ref: '#/definitions/domain.PlayingPosition'
      rank:
        type: number
      telegramId:
        type: integer
      telegramUsername:
        type: string
    type: object
  domain.Waitlist:
    properties:
      date:
        type: string
      eventId:
        type: string
      id:
        type: integer
      user:
        $ref: '#/definitions/domain.User'
      userId:
        type: string
    type: object
  domain.WaitlistUser:
    properties:
      date:
        type: string
      user:
        $ref: '#/definitions/domain.User'
    type: object
  image.UploadResponse:
    properties:
      url:
        example: https://example.com/image.jpg
        type: string
    type: object
  registration.PaymentResponse:
    properties:
      payment_id:
        type: string
      payment_url:
        type: string
    type: object
  webhook.WebhookEvent:
    properties:
      event:
        type: string
      object:
        $ref: '#/definitions/webhook.WebhookEventObject'
      type:
        type: string
    type: object
  webhook.WebhookEventObject:
    properties:
      id:
        type: string
      status:
        type: string
    type: object
info:
  contact: {}
  description: Manage chats, users, tournaments. For JWT authentication use 'Bearer
    <token>' format in Authorization header.
  title: GoPadel server
  version: "1.0"
paths:
  /admin:
    post:
      consumes:
      - application/json
      description: Create a new admin user. Available only for superuser.
      parameters:
      - description: Admin data
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/domain.CreateAdminUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.AdminUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create admin user
      tags:
      - admin
  /admin/{id}:
    delete:
      consumes:
      - application/json
      description: Delete admin user. Available only for superuser.
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete admin user
      tags:
      - admin
    patch:
      consumes:
      - application/json
      description: Update admin user data. Available only for superuser.
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: string
      - description: Admin update data
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/domain.PatchAdminUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.AdminUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update admin user
      tags:
      - admin
  /admin/auth/change-password:
    post:
      consumes:
      - application/json
      description: Change password for currently authenticated admin
      parameters:
      - description: Password change data
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/domain.AdminPasswordChange'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change admin password
      tags:
      - admin-auth
  /admin/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate admin user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/domain.AdminLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.AdminToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Admin login
      tags:
      - admin-auth
  /admin/auth/me:
    get:
      description: Get information about currently authenticated admin
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.AdminMe'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current admin info
      tags:
      - admin-auth
  /admin/clubs:
    get:
      description: Get all clubs. Available for any admin.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Club'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all clubs (Admin)
      tags:
      - admin-clubs
    post:
      consumes:
      - application/json
      description: Create a new club. Available for superusers only.
      parameters:
      - description: Club data
        in: body
        name: club
        required: true
        schema:
          $ref: '#/definitions/domain.CreateClub'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Club'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create club (Admin)
      tags:
      - admin-clubs
  /admin/clubs/{id}:
    delete:
      description: Delete club. Available for superusers only.
      parameters:
      - description: Club ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete club (Admin)
      tags:
      - admin-clubs
    patch:
      consumes:
      - application/json
      description: Update club data. Available for superusers only.
      parameters:
      - description: Club ID
        in: path
        name: id
        required: true
        type: string
      - description: Club update data
        in: body
        name: club
        required: true
        schema:
          $ref: '#/definitions/domain.PatchClub'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Club'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update club (Admin)
      tags:
      - admin-clubs
  /admin/courts:
    get:
      description: Get all courts. Available for any admin.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Court'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all courts (Admin)
      tags:
      - admin-courts
    post:
      consumes:
      - application/json
      description: Create a new court. Available only for superuser.
      parameters:
      - description: Court data
        in: body
        name: court
        required: true
        schema:
          $ref: '#/definitions/domain.CreateCourt'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Court'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create court (Admin)
      tags:
      - admin-courts
  /admin/courts/{id}:
    delete:
      description: Delete court. Available only for superuser.
      parameters:
      - description: Court ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete court (Admin)
      tags:
      - admin-courts
    get:
      description: Get court by ID. Available for any admin.
      parameters:
      - description: Court ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Court'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get court (Admin)
      tags:
      - admin-courts
    patch:
      consumes:
      - application/json
      description: Update court data. Available only for superuser.
      parameters:
      - description: Court ID
        in: path
        name: id
        required: true
        type: string
      - description: Court update data
        in: body
        name: court
        required: true
        schema:
          $ref: '#/definitions/domain.PatchCourt'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Court'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update court (Admin)
      tags:
      - admin-courts
  /admin/filter:
    post:
      consumes:
      - application/json
      description: Get filtered list of admin users. Available only for superuser.
      parameters:
      - description: Admin filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/domain.FilterAdminUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.AdminUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Filter admin users
      tags:
      - admin
  /admin/loyalties:
    get:
      description: Get all loyalty levels. Available for any admin.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Loyalty'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all loyalty levels (Admin)
      tags:
      - admin-loyalties
    post:
      consumes:
      - application/json
      description: Create a new loyalty level. Available for any admin.
      parameters:
      - description: Loyalty data
        in: body
        name: loyalty
        required: true
        schema:
          $ref: '#/definitions/domain.CreateLoyalty'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Loyalty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create loyalty level (Admin)
      tags:
      - admin-loyalties
  /admin/loyalties/{id}:
    delete:
      description: Delete loyalty level. Available for any admin.
      parameters:
      - description: Loyalty ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete loyalty level (Admin)
      tags:
      - admin-loyalties
    patch:
      consumes:
      - application/json
      description: Update loyalty level data. Available for any admin.
      parameters:
      - description: Loyalty ID
        in: path
        name: id
        required: true
        type: integer
      - description: Loyalty update data
        in: body
        name: loyalty
        required: true
        schema:
          $ref: '#/definitions/domain.PatchLoyalty'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Loyalty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update loyalty level (Admin)
      tags:
      - admin-loyalties
  /admin/users/{id}:
    patch:
      consumes:
      - application/json
      description: Update user data. Available only for superuser. Cannot change telegramUsername.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.AdminPatchUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user (Admin)
      tags:
      - admin-users
  /admin/users/filter:
    post:
      consumes:
      - application/json
      description: Get filtered list of users. Available for any admin.
      parameters:
      - description: User filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/domain.FilterUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Filter users (Admin)
      tags:
      - admin-users
  /api/v1/yookassa_webhook:
    post:
      consumes:
      - application/json
      description: Handles payment status updates from YooKassa
      parameters:
      - description: Webhook event
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/webhook.WebhookEvent'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: YooKassa webhook for payment notifications
      tags:
      - webhook
  /clubs/{club_id}/join:
    post:
      consumes:
      - application/json
      parameters:
      - description: Club ID
        in: path
        name: club_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Club data
          schema:
            $ref: '#/definitions/domain.Club'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Join club
      tags:
      - clubs
  /clubs/filter:
    post:
      consumes:
      - application/json
      parameters:
      - description: Filter parameters
        in: body
        name: filter
        schema:
          $ref: '#/definitions/domain.FilterClub'
      produces:
      - application/json
      responses:
        "200":
          description: List of clubs
          schema:
            items:
              $ref: '#/definitions/domain.Club'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Filter clubs
      tags:
      - clubs
  /clubs/my:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: List of user's clubs
          schema:
            items:
              $ref: '#/definitions/domain.Club'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get my clubs
      tags:
      - clubs
  /courts:
    get:
      consumes:
      - application/json
      description: Returns a list of all courts. Only available for authenticated
        Telegram admins.
      produces:
      - application/json
      responses:
        "200":
          description: List of courts
          schema:
            items:
              $ref: '#/definitions/domain.Court'
            type: array
        "401":
          description: User not authorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Admin rights required
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get all courts
      tags:
      - courts
  /events:
    post:
      consumes:
      - application/json
      parameters:
      - description: Event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/domain.CreateEvent'
      produces:
      - application/json
      responses:
        "201":
          description: Created event
          schema:
            $ref: '#/definitions/domain.Event'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Create new event
      tags:
      - events
  /events/{event_id}:
    delete:
      description: Deletes an event with access rights verification
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      responses:
        "204":
          description: Event successfully deleted
        "400":
          description: Bad request
        "403":
          description: Insufficient permissions
        "404":
          description: Event not found
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Delete event
      tags:
      - events
    patch:
      consumes:
      - application/json
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      - description: Event update data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/domain.PatchEvent'
      produces:
      - application/json
      responses:
        "200":
          description: Updated event
          schema:
            $ref: '#/definitions/domain.Event'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Update existing event
      tags:
      - events
  /events/{event_id}/waitlist:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Updated waitlist after removal
          schema:
            items:
              $ref: '#/definitions/domain.WaitlistUser'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Remove current user from event waitlist
      tags:
      - events
    get:
      consumes:
      - application/json
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of waitlist users
          schema:
            items:
              $ref: '#/definitions/domain.WaitlistUser'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get event waitlist
      tags:
      - events
    post:
      consumes:
      - application/json
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Waitlist entry created
          schema:
            $ref: '#/definitions/domain.Waitlist'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Add current user to event waitlist
      tags:
      - events
  /events/filter:
    post:
      consumes:
      - application/json
      parameters:
      - description: Filter parameters
        in: body
        name: filter
        schema:
          $ref: '#/definitions/domain.FilterEvent'
      produces:
      - application/json
      responses:
        "200":
          description: List of events
          schema:
            items:
              $ref: '#/definitions/domain.Event'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Filter events
      tags:
      - events
  /images/upload/avatar:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: Image data
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: A url to the stored image
          schema:
            $ref: '#/definitions/image.UploadResponse'
        "400":
          description: Parsing error
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Upload file to s3
      tags:
      - images
  /loyalties:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: List of loyalty programs
          schema:
            items:
              $ref: '#/definitions/domain.Loyalty'
            type: array
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get all loyalty programs
      tags:
      - loyalties
  /registrations/{event_id}:
    post:
      description: Creates a new registration for an event with PENDING status
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      responses:
        "201":
          description: Created registration
          schema:
            $ref: '#/definitions/domain.Registration'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - user already registered or validation failed
        "404":
          description: Event not found
        "500":
          description: Internal server error
      security:
      - ApiKeyAuth: []
      summary: Create event registration
      tags:
      - registrations
  /registrations/{event_id}/{user_id}/approve:
    put:
      description: Approve a pending registration (organizer only)
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: Approved registration
          schema:
            $ref: '#/definitions/domain.Registration'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - only organizer can approve
        "404":
          description: Registration not found
        "500":
          description: Internal server error
      security:
      - ApiKeyAuth: []
      summary: Approve registration
      tags:
      - registrations
  /registrations/{event_id}/{user_id}/reject:
    put:
      description: Reject a pending registration (organizer only)
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: Rejected registration
          schema:
            $ref: '#/definitions/domain.Registration'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - only organizer can reject
        "404":
          description: Registration not found
        "500":
          description: Internal server error
      security:
      - ApiKeyAuth: []
      summary: Reject registration
      tags:
      - registrations
  /registrations/{event_id}/cancel:
    post:
      description: Cancels a registration with PENDING status (before payment)
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      responses:
        "200":
          description: Cancelled registration
          schema:
            $ref: '#/definitions/domain.Registration'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - no pending registration or cannot cancel
        "404":
          description: Event not found
        "500":
          description: Internal server error
      security:
      - ApiKeyAuth: []
      summary: Cancel event registration before payment
      tags:
      - registrations
  /registrations/{event_id}/cancel-paid:
    post:
      description: Cancels a confirmed registration (after payment)
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      responses:
        "200":
          description: Cancelled registration
          schema:
            $ref: '#/definitions/domain.Registration'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - no confirmed registration or cannot cancel
        "404":
          description: Event not found
        "500":
          description: Internal server error
      security:
      - ApiKeyAuth: []
      summary: Cancel paid event registration
      tags:
      - registrations
  /registrations/{event_id}/payment:
    post:
      description: Creates a payment for event registration and returns payment URL
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      responses:
        "201":
          description: Payment URL and ID
          schema:
            $ref: '#/definitions/registration.PaymentResponse'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - no pending registration found
        "404":
          description: Event not found
        "500":
          description: Internal server error
      security:
      - ApiKeyAuth: []
      summary: Create payment for registration
      tags:
      - registrations
  /registrations/{event_id}/reactivate:
    post:
      description: Reactivates a cancelled registration if event has available slots
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      responses:
        "200":
          description: Reactivated registration
          schema:
            $ref: '#/definitions/domain.Registration'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - no cancelled registration or cannot reactivate
        "404":
          description: Event not found
        "500":
          description: Internal server error
      security:
      - ApiKeyAuth: []
      summary: Reactivate cancelled registration
      tags:
      - registrations
  /users/filter:
    post:
      consumes:
      - application/json
      parameters:
      - description: User filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/domain.FilterUser'
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Filter users
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get me
      tags:
      - users
    patch:
      consumes:
      - application/json
      parameters:
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.PatchUser'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user data
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Update current user data
      tags:
      - users
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Create me
      tags:
      - users
  /users/me/admin:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Admin status
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Check if user is admin
      tags:
      - users
  /users/me/bio:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: User bio data
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
        "404":
          description: User bio not found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get current user bio
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-API-Token
    type: apiKey
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
