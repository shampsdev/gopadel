package telegram

import (
	"fmt"
	"gopadel/scheduler/cmd/config"
	"gopadel/scheduler/pkg/domain"
)

func GenerateTournamentURL(config *config.Config, tournamentID string) string {
	return fmt.Sprintf("%s?startapp=t-%s", config.TelegramWebAppURL(), tournamentID)
}

func GetMessageForTaskType(taskType domain.TaskType, data map[string]interface{}, config *config.Config) *domain.MessageText {
	tournamentID := ""
	if id, ok := data["tournament_id"].(string); ok {
		tournamentID = id
	}
	tournamentURL := GenerateTournamentURL(config, tournamentID)

	switch taskType {
	case domain.TaskTypeTournamentRegistrationSuccess:
		return &domain.MessageText{
			Text: fmt.Sprintf(
				"üéæ –û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç—É—Ä–Ω–∏—Ä '%s'.\n\n–í–∞—à–µ –º–µ—Å—Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n\n%s",
				data["tournament_name"],
				tournamentURL,
			),
		}
	
	case domain.TaskTypeTournamentPaymentReminder1:
		return &domain.MessageText{
			Text: fmt.Sprintf(
				"üí∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ —Ç—É—Ä–Ω–∏—Ä–∞ '%s'.\n\n–û—Å—Ç–∞–ª–æ—Å—å 12 —á–∞—Å–æ–≤ –¥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ.\n\n%s",
				data["tournament_name"],
				tournamentURL,
			),
		}
	
	case domain.TaskTypeTournamentPaymentReminder2:
		return &domain.MessageText{
			Text: fmt.Sprintf(
				"‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ —Ç—É—Ä–Ω–∏—Ä–∞ '%s'.\n\n–û—Å—Ç–∞–ª–æ—Å—å 3 —á–∞—Å–∞ –¥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n\n%s",
				data["tournament_name"],
				tournamentURL,
			),
		}
	
	case domain.TaskTypeTournamentPaymentReminder3:
		return &domain.MessageText{
			Text: fmt.Sprintf(
				"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –î–æ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä '%s' –æ—Å—Ç–∞–ª—Å—è –≤—Å–µ–≥–æ 1 —á–∞—Å.\n\n–û–ø–ª–∞—Ç–∏—Ç–µ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –º–µ—Å—Ç–æ!\n\n%s",
				data["tournament_name"],
				tournamentURL,
			),
		}
	
	case domain.TaskTypeTournamentPaymentSuccess:
		return &domain.MessageText{
			Text: fmt.Sprintf(
				"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç—É—Ä–Ω–∏—Ä '%s'.\n\n–£–≤–∏–¥–∏–º—Å—è –Ω–∞ –∫–æ—Ä—Ç–µ!\n\n%s",
				data["tournament_name"],
				tournamentURL,
			),
		}
	
	case domain.TaskTypeTournamentRegistrationCanceled:
		return &domain.MessageText{
			Text: fmt.Sprintf(
				"‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ '%s'.\n\n%s",
				data["tournament_name"],
				tournamentURL,
			),
		}
	
	case domain.TaskTypeTournamentLoyaltyChanged:
		return &domain.MessageText{
			Text: fmt.Sprintf(
				"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à —É—Ä–æ–≤–µ–Ω—å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å '%s' –Ω–∞ '%s'.\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞!",
				data["old_level"],
				data["new_level"],
			),
		}
	
	case domain.TaskTypeTournamentRegistrationAutoDeleteUnpaid:
		return &domain.MessageText{
			Text: fmt.Sprintf(
				"‚è∞ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä '%s' –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–æ–ø–ª–∞—Ç—ã –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ä–æ–∫.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞.\n\n%s",
				data["tournament_name"],
				tournamentURL,
			),
		}
	
	default:
		return &domain.MessageText{
			Text: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç GoPadel",
		}
	}
}